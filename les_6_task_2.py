"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);

проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.

Выбрана следующая задача:

7. В одномерном массиве целых чисел определить два наименьших элемента.
Они могут быть как равны между собой (оба минимальны), так и различаться.

Второй вариант (с использованием sort())
"""
import random
import sys


list_numbers = [random.randint(0, 20) for _ in range(10)]  # Генерируем список чисел
print('Initial list of numbers:', list_numbers)  # Выводим исследуемый список
list_numbers.sort() # Поиск двух наименьших элементов (сортировка по возростанию)
min1 = list_numbers[0]
min2 = list_numbers[1]
print(f'The two smallest elements: {min1} and {min2}')

print('Версия Python и платформы:', sys.version, sys.platform)
print('Размер коллекции:', sys.getsizeof(list_numbers))
print('Размер переменной:', sys.getsizeof(min1))
print('Размер переменной:', sys.getsizeof(min2))

"""
Версия Python и платформы: 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] win32
Размер коллекции: 192
Размер переменной: 28
Размер переменной: 28

Объем памяти, занимаемый переменными почти такой же как и в первом варианта.
Код за счет использовани sort получился более компактным.
"""
